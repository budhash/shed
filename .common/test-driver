#!/bin/bash

# Test driver for shed tools
# Discovers tools from tools.txt and runs their test suites

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Counters
TOTAL_TOOLS=0
PASSED_TOOLS=0
FAILED_TOOLS=0
SKIPPED_TOOLS=0

# Arrays to track results
PASSED_LIST=()
FAILED_LIST=()
SKIPPED_LIST=()

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
TOOLS_FILE="$PROJECT_ROOT/tools.txt"

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "INFO")  echo -e "${BLUE}[INFO]${NC} $message" ;;
        "PASS")  echo -e "${GREEN}[PASS]${NC} $message" ;;
        "FAIL")  echo -e "${RED}[FAIL]${NC} $message" ;;
        "SKIP")  echo -e "${YELLOW}[SKIP]${NC} $message" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC} $message" ;;
    esac
}

# Function to print banner
print_banner() {
    echo
    echo "=============================================="
    echo "           üîß SHED TEST RUNNER üîß"
    echo "=============================================="
    echo
}

# Function to print summary
print_summary() {
    echo
    echo "=============================================="
    echo "                 SUMMARY"
    echo "=============================================="
    echo "Total tools: $TOTAL_TOOLS"
    echo "Passed: $PASSED_TOOLS"
    echo "Failed: $FAILED_TOOLS"
    echo "Skipped: $SKIPPED_TOOLS"
    echo

    if [ ${#PASSED_LIST[@]} -gt 0 ]; then
        print_status "PASS" "Passed tools: ${PASSED_LIST[*]}"
    fi

    if [ ${#FAILED_LIST[@]} -gt 0 ]; then
        print_status "FAIL" "Failed tools: ${FAILED_LIST[*]}"
    fi

    if [ ${#SKIPPED_LIST[@]} -gt 0 ]; then
        print_status "SKIP" "Skipped tools: ${SKIPPED_LIST[*]}"
    fi

    echo
    if [ $FAILED_TOOLS -eq 0 ]; then
        print_status "PASS" "All tests completed successfully! üéâ"
        return 0
    else
        print_status "FAIL" "Some tests failed! ‚ùå"
        return 1
    fi
}

# Function to run tests for a single tool
run_tool_tests() {
    local tool_name=$1
    local tool_desc=$2
    local tool_dir="$PROJECT_ROOT/$tool_name"
    local test_file="$tool_dir/tests.sh"

    echo
    echo "----------------------------------------------"
    echo "Testing: $tool_name"
    echo "Description: $tool_desc"
    echo "----------------------------------------------"

    # Check if tool directory exists
    if [ ! -d "$tool_dir" ]; then
        print_status "SKIP" "Directory $tool_dir does not exist"
        SKIPPED_TOOLS=$((SKIPPED_TOOLS + 1))
        SKIPPED_LIST+=("$tool_name")
        return
    fi

    # Check if tests.sh exists
    if [ ! -f "$test_file" ]; then
        print_status "SKIP" "No tests.sh found in $tool_dir"
        SKIPPED_TOOLS=$((SKIPPED_TOOLS + 1))
        SKIPPED_LIST+=("$tool_name")
        return
    fi

    # Check if tests.sh is executable
    if [ ! -x "$test_file" ]; then
        print_status "WARN" "tests.sh is not executable, making it executable..."
        chmod +x "$test_file"
    fi

    # Run the tests
    print_status "INFO" "Running tests for $tool_name..."
    
    if (cd "$tool_dir" && ./tests.sh); then
        print_status "PASS" "$tool_name tests completed successfully"
        PASSED_TOOLS=$((PASSED_TOOLS + 1))
        PASSED_LIST+=("$tool_name")
    else
        print_status "FAIL" "$tool_name tests failed"
        FAILED_TOOLS=$((FAILED_TOOLS + 1))
        FAILED_LIST+=("$tool_name")
    fi
}

# Main execution
main() {
    print_banner

    # Check if tools.txt exists
    if [ ! -f "$TOOLS_FILE" ]; then
        print_status "FAIL" "tools.txt not found at $TOOLS_FILE"
        exit 1
    fi

    print_status "INFO" "Discovering tools from $TOOLS_FILE"
    
    # Read tools.txt and process each tool
    # Handle files that don't end with newline by adding one if needed
    while IFS=':' read -r tool_name tool_desc || [[ -n "$tool_name" ]]; do
        # Skip empty lines and comments
        [[ -z "$tool_name" || "$tool_name" =~ ^[[:space:]]*# ]] && continue
        
        # Trim whitespace
        tool_name=$(echo "$tool_name" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        tool_desc=$(echo "$tool_desc" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        # Skip if tool_name is empty after trimming
        [[ -z "$tool_name" ]] && continue
        
        TOTAL_TOOLS=$((TOTAL_TOOLS + 1))
        run_tool_tests "$tool_name" "$tool_desc"
        
    done < "$TOOLS_FILE"

    # Print summary and exit with appropriate code
    if print_summary; then
        exit 0
    else
        exit 1
    fi
}

# Handle script arguments
case "${1:-}" in
    "-h"|"--help")
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Test runner for shed tools"
        echo ""
        echo "Options:"
        echo "  -h, --help    Show this help message"
        echo "  -v, --verbose Enable verbose output"
        echo ""
        echo "This script reads tools.txt from the project root and runs"
        echo "tests.sh for each discovered tool."
        exit 0
        ;;
    "-v"|"--verbose")
        set -x
        ;;
esac

# Run main function
main "$@"